using Logic.Common.Interfaces.Persistence.Common;
using Newtonsoft.Json;

namespace Logic.Common.Behaviors;

public enum LogCategory
{
    View,
    Business,
    Server,
    Data,
    DataStore,
}

public class LoggingBehavior<TRequest, TResponse> : IPipelineBehavior<TRequest, TResponse> 
    where TRequest : IRequest<TResponse>
    where TResponse : IErrorOr
{
    private readonly IEFCoreLoggingRepository _loggingRepository;

    public LoggingBehavior(
        IEFCoreLoggingRepository loggingRepository
    )
    {
        _loggingRepository = loggingRepository;
    }

    public async Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken, RequestHandlerDelegate<TResponse> next)
    {
        string requestName = request.GetType().Name;

        TResponse response = await next();

        if (response is null) return response!;

        bool isError = response.Errors?.First().Code == "ErrorOr.NoError";     //determines if reponse is an error or not
        Log log = new()     //create logEntry
        {
            LogLevel = (byte)(isError ? 4 : 2),     //loglevel 4 if error, else 2
            Category = LogCategory.Data.ToString(),
            Message = JsonConvert.SerializeObject(request),
            Operation = requestName
            //Timestamp is autogenerated with a new instance of Log
        };

        await _loggingRepository.InsertAsync(log);      //log user action to database

        return response;
    }
}